import os
import sys
import json
import hashlib
import base64
import shutil
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import subprocess
import threading
import webbrowser
import time
import io
from datetime import datetime
from PIL import Image, ImageTk
import tkinterweb  # pip install tkinterweb
import customtkinter as ctk  # pip install customtkinter
import mimetypes
import random
import string
import platform
from functools import partial

class ModernTheme:
    # Tema renkleri
    class Light:
        bg_primary = "#FFFFFF"
        bg_secondary = "#F5F5F5"
        accent = "#4A6FFF"
        accent_hover = "#3A5FEF"
        text_primary = "#333333"
        text_secondary = "#666666"
        border = "#E0E0E0"
        success = "#4CAF50"
        warning = "#FFC107"
        error = "#F44336"
        highlight = "#E3F2FD"
        
    class Dark:
        bg_primary = "#1E1E1E"
        bg_secondary = "#252526"
        accent = "#4A6FFF"
        accent_hover = "#3A5FEF"
        text_primary = "#F0F0F0"
        text_secondary = "#B0B0B0"
        border = "#444444"
        success = "#81C784"
        warning = "#FFD54F"
        error = "#E57373"
        highlight = "#2C3E50"
    
    class NeonDark:
        bg_primary = "#121212"
        bg_secondary = "#1a1a1a"
        accent = "#00E5FF"
        accent_hover = "#00B8D4"
        text_primary = "#FFFFFF"
        text_secondary = "#BBBBBB"
        border = "#333333"
        success = "#00E676"
        warning = "#FFEA00"
        error = "#FF1744"
        highlight = "#311B92"
    
    class Forest:
        bg_primary = "#FAFAFA"
        bg_secondary = "#F0F7EE"
        accent = "#2E7D32"
        accent_hover = "#1B5E20"
        text_primary = "#263238"
        text_secondary = "#546E7A"
        border = "#A5D6A7"
        success = "#4CAF50"
        warning = "#FFA000"
        error = "#D32F2F"
        highlight = "#C8E6C9"
    
    class Ocean:
        bg_primary = "#FFFFFF"
        bg_secondary = "#E3F2FD"
        accent = "#0277BD"
        accent_hover = "#01579B"
        text_primary = "#263238"
        text_secondary = "#455A64"
        border = "#BBDEFB"
        success = "#00BFA5"
        warning = "#FFB300"
        error = "#F44336"
        highlight = "#B3E5FC"

class ImageViewer(ctk.CTkToplevel):
    def __init__(self, master, image_path):
        super().__init__(master)
        self.title("G√∂r√ºnt√º G√∂r√ºnt√ºleyici")
        self.geometry("800x600")
        self.minsize(400, 300)
        
        self.theme = master.theme
        self.configure(fg_color=self.theme.bg_primary)
        
        # Ana √ßer√ßeve
        main_frame = ctk.CTkFrame(self, fg_color=self.theme.bg_primary)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # √úst buton √ßubuƒüu
        button_frame = ctk.CTkFrame(main_frame, fg_color=self.theme.bg_secondary)
        button_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Resmi d√∂nd√ºrme butonlarƒ±
        self.rotate_left_btn = ctk.CTkButton(
            button_frame, text="‚Ü∫ Sola D√∂nd√ºr", command=self._rotate_left,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=120
        )
        self.rotate_left_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        self.rotate_right_btn = ctk.CTkButton(
            button_frame, text="‚Üª Saƒüa D√∂nd√ºr", command=self._rotate_right,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=120
        )
        self.rotate_right_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # Zoom butonlarƒ±
        self.zoom_in_btn = ctk.CTkButton(
            button_frame, text="üîç+", command=self._zoom_in,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=80
        )
        self.zoom_in_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        self.zoom_out_btn = ctk.CTkButton(
            button_frame, text="üîç-", command=self._zoom_out,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=80
        )
        self.zoom_out_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        self.fit_btn = ctk.CTkButton(
            button_frame, text="Ekrana Sƒ±ƒüdƒ±r", command=self._fit_to_screen,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=120
        )
        self.fit_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # Kapat butonu saƒüda
        self.close_btn = ctk.CTkButton(
            button_frame, text="‚úñ Kapat", command=self.destroy,
            fg_color=self.theme.error, hover_color="#D32F2F",
            text_color="#FFFFFF", width=100
        )
        self.close_btn.pack(side=tk.RIGHT, padx=5, pady=5)
        
        # Resim g√∂sterme alanƒ± - ScrollableFrame i√ßinde
        self.scroll_container = ctk.CTkScrollableFrame(main_frame, fg_color=self.theme.bg_secondary)
        self.scroll_container.pack(fill=tk.BOTH, expand=True)
        
        # Resim etiketi
        self.image_label = ctk.CTkLabel(self.scroll_container, text="")
        self.image_label.pack(fill=tk.BOTH, expand=True)
        
        # Dosya bilgisi
        self.info_label = ctk.CTkLabel(
            main_frame, 
            text=f"Dosya: {os.path.basename(image_path)}", 
            text_color=self.theme.text_secondary
        )
        self.info_label.pack(pady=(5, 0), anchor=tk.W)
        
        # Resmi y√ºkle ve hazƒ±rla
        self.original_image = Image.open(image_path)
        self.current_image = self.original_image.copy()
        self.zoom_level = 1.0
        self.rotation_angle = 0
        self._fit_to_screen()  # Ba≈ülangƒ±√ßta ekrana sƒ±ƒüdƒ±r
        
        # Pencere boyutu deƒüi≈ütiƒüinde resmi yeniden √∂l√ßeklendir
        self.bind("<Configure>", lambda e: self._update_image() if e.widget == self else None)
    
    def _rotate_left(self):
        self.rotation_angle = (self.rotation_angle - 90) % 360
        self._update_image()
    
    def _rotate_right(self):
        self.rotation_angle = (self.rotation_angle + 90) % 360
        self._update_image()
    
    def _zoom_in(self):
        self.zoom_level *= 1.2
        self._update_image()
    
    def _zoom_out(self):
        self.zoom_level /= 1.2
        self._update_image()
    
    def _fit_to_screen(self):
        self.zoom_level = 1.0
        self._update_image(fit=True)
    
    def _update_image(self, fit=False):
        # Rotasyon uygula
        rotated = self.original_image.rotate(self.rotation_angle, expand=True)
        
        # Pencere boyutunu al
        window_width = self.winfo_width() - 40  # Kenar bo≈üluklarƒ±nƒ± hesaba kat
        window_height = self.winfo_height() - 100  # Butonlar ve kenar bo≈üluklarƒ±nƒ± hesaba kat
        
        if window_width <= 1 or window_height <= 1:  # Pencere hen√ºz hazƒ±r deƒüil
            self.after(100, self._update_image)
            return
        
        # Otomatik boyutlandƒ±r veya zoom uygula
        if fit:
            # Orijinal boyutlarƒ± al
            img_width, img_height = rotated.size
            
            # En-boy oranƒ±nƒ± koru
            width_ratio = window_width / img_width
            height_ratio = window_height / img_height
            ratio = min(width_ratio, height_ratio)
            
            new_width = int(img_width * ratio)
            new_height = int(img_height * ratio)
            
            resized = rotated.resize((new_width, new_height), Image.LANCZOS)
        else:
            # Zoom seviyesini uygula
            new_width = int(rotated.width * self.zoom_level)
            new_height = int(rotated.height * self.zoom_level)
            resized = rotated.resize((new_width, new_height), Image.LANCZOS)
        
        # Tkinter PhotoImage'e d√∂n√º≈üt√ºr ve g√∂ster
        self.tk_image = ImageTk.PhotoImage(resized)
        self.image_label.configure(image=self.tk_image)
        
        # G√∂r√ºnt√º boyutunu g√ºncelle
        self.info_label.configure(
            text=f"Dosya: {os.path.basename(self.original_image.filename)} | "
                f"Boyut: {new_width}x{new_height} | Zoom: {self.zoom_level:.2f}x"
        )

class VideoPlayer(ctk.CTkToplevel):
    def __init__(self, master, video_file):
        super().__init__(master)
        self.title("Video Oynatƒ±cƒ±")
        self.geometry("800x600")
        self.minsize(640, 480)
        
        self.theme = master.theme
        self.configure(fg_color=self.theme.bg_primary)
        
        self.video_file = video_file
        
        # Ana √ßer√ßeve
        main_frame = ctk.CTkFrame(self, fg_color=self.theme.bg_primary)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Video oynatƒ±cƒ± alanƒ±
        self.player_frame = ctk.CTkFrame(main_frame, fg_color=self.theme.bg_secondary)
        self.player_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # Bilgi etiketi
        self.info_label = ctk.CTkLabel(
            self.player_frame, 
            text="Video y√ºkleniyor...",
            text_color=self.theme.text_primary
        )
        self.info_label.pack(pady=20)
        
        # Kontrol butonlarƒ± √ßer√ßevesi
        control_frame = ctk.CTkFrame(main_frame, fg_color=self.theme.bg_secondary)
        control_frame.pack(fill=tk.X, pady=(0, 5))
        
        # Kontrol butonlarƒ±
        self.play_btn = ctk.CTkButton(
            control_frame, text="‚ñ∂Ô∏è Oynat", command=self._play,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=100
        )
        self.play_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        self.pause_btn = ctk.CTkButton(
            control_frame, text="‚è∏Ô∏è Duraklat", command=self._pause,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=100
        )
        self.pause_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        self.stop_btn = ctk.CTkButton(
            control_frame, text="‚èπÔ∏è Durdur", command=self._stop,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=100
        )
        self.stop_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # Kapat butonu saƒüda
        self.close_btn = ctk.CTkButton(
            control_frame, text="‚úñ Kapat", command=self._close,
            fg_color=self.theme.error, hover_color="#D32F2F",
            text_color="#FFFFFF", width=100
        )
        self.close_btn.pack(side=tk.RIGHT, padx=5, pady=5)
        
        # Bilgilendirme etiketi
        self.file_info = ctk.CTkLabel(
            main_frame, 
            text=f"Dosya: {os.path.basename(video_file)}", 
            text_color=self.theme.text_secondary
        )
        self.file_info.pack(anchor=tk.W)
        
        # Kullanƒ±cƒ±nƒ±n sisteminde uygun video oynatƒ±cƒ±yƒ± ba≈ülat
        self._launch_player()
    
    def _launch_player(self):
        try:
            # Sisteme g√∂re uygun video oynatƒ±cƒ± se√ß
            system = platform.system()
            
            if system == "Windows":
                # Windows'ta varsayƒ±lan oynatƒ±cƒ± ile a√ß
                os.startfile(self.video_file)
                self.info_label.configure(text="Video sistem oynatƒ±cƒ±sƒ±nda a√ßƒ±ldƒ±.")
            elif system == "Darwin":  # macOS
                subprocess.Popen(["open", self.video_file])
                self.info_label.configure(text="Video sistem oynatƒ±cƒ±sƒ±nda a√ßƒ±ldƒ±.")
            else:  # Linux ve diƒüerleri
                subprocess.Popen(["xdg-open", self.video_file])
                self.info_label.configure(text="Video sistem oynatƒ±cƒ±sƒ±nda a√ßƒ±ldƒ±.")
            
        except Exception as e:
            self.info_label.configure(text=f"Video a√ßƒ±lamadƒ±: {str(e)}")
    
    def _play(self):
        messagebox.showinfo("Bilgi", "Video sistem oynatƒ±cƒ±sƒ±nda a√ßƒ±ldƒ±.")
    
    def _pause(self):
        messagebox.showinfo("Bilgi", "Bu √∂zellik ≈üu anda desteklenmiyor.\nL√ºtfen sistem oynatƒ±cƒ±sƒ±nƒ± kullanƒ±n.")
    
    def _stop(self):
        messagebox.showinfo("Bilgi", "Bu √∂zellik ≈üu anda desteklenmiyor.\nL√ºtfen sistem oynatƒ±cƒ±sƒ±nƒ± kullanƒ±n.")
    
    def _close(self):
        messagebox.showinfo("Bilgi", "Video oynatƒ±cƒ±sƒ± kapatƒ±lƒ±yor.\nSistem oynatƒ±cƒ±sƒ±nƒ± manuel olarak kapatmanƒ±z gerekebilir.")
        self.destroy()

class TextEditor(ctk.CTkToplevel):
    def __init__(self, master, file_path):
        super().__init__(master)
        self.title("Metin D√ºzenleyici")
        self.geometry("800x600")
        self.minsize(400, 300)
        
        self.theme = master.theme
        self.configure(fg_color=self.theme.bg_primary)
        
        self.file_path = file_path
        
        # Ana √ßer√ßeve
        main_frame = ctk.CTkFrame(self, fg_color=self.theme.bg_primary)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # √úst buton √ßubuƒüu
        button_frame = ctk.CTkFrame(main_frame, fg_color=self.theme.bg_secondary)
        button_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Kaydet butonu
        self.save_btn = ctk.CTkButton(
            button_frame, text="üíæ Kaydet", command=self._save_file,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=100
        )
        self.save_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # Kapat butonu saƒüda
        self.close_btn = ctk.CTkButton(
            button_frame, text="‚úñ Kapat", command=self._close,
            fg_color=self.theme.error, hover_color="#D32F2F",
            text_color="#FFFFFF", width=100
        )
        self.close_btn.pack(side=tk.RIGHT, padx=5, pady=5)
        
        # Metin d√ºzenleme alanƒ±
        self.text_frame = ctk.CTkFrame(main_frame, fg_color=self.theme.bg_secondary)
        self.text_frame.pack(fill=tk.BOTH, expand=True)
        
        # Text widget kullanarak metin d√ºzenleme alanƒ± olu≈ütur
        text_color = self.theme.text_primary
        bg_color = self.theme.bg_secondary
        
        self.text_area = tk.Text(
            self.text_frame,
            bg=bg_color,
            fg=text_color,
            insertbackground=text_color,  # imle√ß rengi
            selectbackground=self.theme.accent,
            selectforeground="#FFFFFF",
            borderwidth=0,
            padx=10,
            pady=10,
            wrap="word",
            font=("Segoe UI" if platform.system() == "Windows" else "Helvetica", 11)
        )
        self.text_area.pack(fill=tk.BOTH, expand=True)
        
        # Kaydƒ±rma √ßubuƒüu
        self.scrollbar = ttk.Scrollbar(self.text_area, command=self.text_area.yview)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.text_area.configure(yscrollcommand=self.scrollbar.set)
        
        # Dosya bilgisi
        self.info_label = ctk.CTkLabel(
            main_frame, 
            text=f"Dosya: {os.path.basename(file_path)}", 
            text_color=self.theme.text_secondary
        )
        self.info_label.pack(pady=(5, 0), anchor=tk.W)
        
        # Dosyayƒ± y√ºkle
        self._load_file()
    
    def _load_file(self):
        try:
            with open(self.file_path, 'r', encoding='utf-8') as file:
                content = file.read()
                self.text_area.delete('1.0', tk.END)
                self.text_area.insert('1.0', content)
        except Exception as e:
            messagebox.showerror("Hata", f"Dosya a√ßƒ±lamadƒ±: {str(e)}")
    
    def _save_file(self):
        try:
            content = self.text_area.get('1.0', tk.END)
            with open(self.file_path, 'w', encoding='utf-8') as file:
                file.write(content)
            messagebox.showinfo("Bilgi", "Dosya ba≈üarƒ±yla kaydedildi.")
        except Exception as e:
            messagebox.showerror("Hata", f"Dosya kaydedilemedi: {str(e)}")
    
    def _close(self):
        answer = messagebox.askyesnocancel(
            "Kaydet ve √áƒ±k", 
            "Deƒüi≈üiklikleri kaydetmek istiyor musunuz?"
        )
        
        if answer is None:  # ƒ∞ptal
            return
        elif answer:  # Evet
            self._save_file()
            self.destroy()
        else:  # Hayƒ±r
            self.destroy()

class FileExplorer(ctk.CTkToplevel):
    def __init__(self, master, folder_path, hidden_id=None):
        super().__init__(master)
        self.title("Gizli Klas√∂r ƒ∞√ßeriƒüi")
        self.geometry("900x600")
        self.minsize(800, 500)
        
        self.master_app = master
        self.theme = master.theme
        self.configure(fg_color=self.theme.bg_primary)
        
        self.folder_path = folder_path
        self.hidden_id = hidden_id
        self.current_path = folder_path
        
        # Ana √ßer√ßeve
        main_frame = ctk.CTkFrame(self, fg_color=self.theme.bg_primary)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # √úst buton √ßubuƒüu
        button_frame = ctk.CTkFrame(main_frame, fg_color=self.theme.bg_secondary)
        button_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Geri butonu
        self.back_btn = ctk.CTkButton(
            button_frame, text="‚¨ÖÔ∏è Geri", command=self._go_back,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=80
        )
        self.back_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # √úst klas√∂re git butonu
        self.up_btn = ctk.CTkButton(
            button_frame, text="‚¨ÜÔ∏è √úst Klas√∂r", command=self._go_up,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=100
        )
        self.up_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # Yenile butonu
        self.refresh_btn = ctk.CTkButton(
            button_frame, text="üîÑ Yenile", command=self._refresh,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=80
        )
        self.refresh_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # Kapat butonu saƒüda
        self.close_btn = ctk.CTkButton(
            button_frame, text="‚úñ Kapat", command=self.destroy,
            fg_color=self.theme.error, hover_color="#D32F2F",
            text_color="#FFFFFF", width=80
        )
        self.close_btn.pack(side=tk.RIGHT, padx=5, pady=5)
        
        # Yeni klas√∂r butonu
        self.new_folder_btn = ctk.CTkButton(
            button_frame, text="üìÅ Yeni Klas√∂r", command=self._create_folder,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=100
        )
        self.new_folder_btn.pack(side=tk.RIGHT, padx=5, pady=5)
        
        # Mevcut yol g√∂sterimi
        path_frame = ctk.CTkFrame(main_frame, fg_color=self.theme.bg_secondary, height=30)
        path_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.path_var = tk.StringVar()
        self.path_var.set(folder_path)
        
        self.path_label = ctk.CTkLabel(
            path_frame, 
            textvariable=self.path_var,
            text_color=self.theme.text_secondary
        )
        self.path_label.pack(padx=10, pady=5, anchor=tk.W)
        
        # Dosya listesi √ßer√ßevesi
        file_frame = ctk.CTkFrame(main_frame, fg_color=self.theme.bg_secondary)
        file_frame.pack(fill=tk.BOTH, expand=True)
        
        # Dosya listesi - TreeView
        self.file_tree = ttk.Treeview(
            file_frame, 
            columns=("name", "size", "date", "type"),
            show="headings",
            selectmode="browse"
        )
        
        # S√ºtun ba≈ülƒ±klarƒ±
        self.file_tree.heading("name", text="ƒ∞sim")
        self.file_tree.heading("size", text="Boyut")
        self.file_tree.heading("date", text="Tarih")
        self.file_tree.heading("type", text="T√ºr")
        
        # S√ºtun geni≈ülikleri
        self.file_tree.column("name", width=350, anchor="w")
        self.file_tree.column("size", width=100, anchor="e")
        self.file_tree.column("date", width=150, anchor="w")
        self.file_tree.column("type", width=100, anchor="w")
        
        # Kaydƒ±rma √ßubuklarƒ±
        vsb = ttk.Scrollbar(file_frame, orient="vertical", command=self.file_tree.yview)
        hsb = ttk.Scrollbar(file_frame, orient="horizontal", command=self.file_tree.xview)
        self.file_tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
        
        # Yerle≈ütirme
        vsb.pack(side=tk.RIGHT, fill=tk.Y)
        hsb.pack(side=tk.BOTTOM, fill=tk.X)
        self.file_tree.pack(fill=tk.BOTH, expand=True)
        
        # A√ßƒ±klama etiketi
        self.status_label = ctk.CTkLabel(
            main_frame, 
            text="Hazƒ±r",
            text_color=self.theme.text_secondary
        )
        self.status_label.pack(pady=(5, 0), anchor=tk.W)
        
        # √áift tƒ±klama olayƒ±
        self.file_tree.bind("<Double-1>", self._on_item_double_click)
        
        # Saƒü tƒ±k men√ºs√º
        self.file_tree.bind("<Button-3>", self._show_context_menu)
        
        # Dosya listesini doldur
        self._populate_files()
        
        # Stil uygulamalarƒ±
        self._apply_treeview_style()
    
    def _apply_treeview_style(self):
        # TreeView stillerini tema renklerine g√∂re ayarla
        style = ttk.Style()
        
        # TreeView arka plan ve yazƒ± renkleri
        style.configure(
            "Treeview", 
            background=self.theme.bg_secondary,
            foreground=self.theme.text_primary,
            fieldbackground=self.theme.bg_secondary,
            borderwidth=0
        )
        
        # TreeView ba≈ülƒ±k stilleri
        style.configure(
            "Treeview.Heading",
            background=self.theme.bg_secondary,
            foreground=self.theme.text_primary,
            borderwidth=1
        )
        
        # Se√ßili √∂ƒüe stili
        style.map(
            "Treeview",
            background=[("selected", self.theme.accent)],
            foreground=[("selected", "#FFFFFF")]
        )
    
    def _populate_files(self):
        # Mevcut dosya listesini temizle
        for item in self.file_tree.get_children():
            self.file_tree.delete(item)
        
        try:
            # Klas√∂rleri ve dosyalarƒ± listele
            folders = []
            files = []
            
            for item in os.listdir(self.current_path):
                item_path = os.path.join(self.current_path, item)
                
                # Dosya bilgilerini al
                stat_info = os.stat(item_path)
                size = stat_info.st_size
                mod_time = datetime.fromtimestamp(stat_info.st_mtime).strftime('%d.%m.%Y %H:%M')
                
                if os.path.isdir(item_path):
                    # Klas√∂r
                    folders.append((item, "<Klas√∂r>", mod_time, "Klas√∂r"))
                else:
                    # Dosya
                    size_str = self._format_size(size)
                    file_type = self._get_file_type(item)
                    files.append((item, size_str, mod_time, file_type))
            
            # √ñnce klas√∂rleri ekle
            for folder in sorted(folders):
                self.file_tree.insert("", tk.END, values=folder, tags=("folder",))
            
            # Sonra dosyalarƒ± ekle
            for file in sorted(files):
                self.file_tree.insert("", tk.END, values=file, tags=("file",))
            
            # Yol etiketini g√ºncelle
            self.path_var.set(self.current_path)
            self.status_label.configure(text=f"{len(folders)} klas√∂r, {len(files)} dosya")
            
        except Exception as e:
            messagebox.showerror("Hata", f"Klas√∂r i√ßeriƒüi listelenemedi: {str(e)}")
    
    def _format_size(self, size_bytes):
        """Dosya boyutunu okunaklƒ± formata d√∂n√º≈üt√ºr√ºr"""
        if size_bytes < 1024:
            return f"{size_bytes} B"
        elif size_bytes < 1024 * 1024:
            return f"{size_bytes/1024:.1f} KB"
        elif size_bytes < 1024 * 1024 * 1024:
            return f"{size_bytes/(1024*1024):.1f} MB"
        else:
            return f"{size_bytes/(1024*1024*1024):.1f} GB"
    
    def _get_file_type(self, filename):
        """Dosya uzantƒ±sƒ±na g√∂re t√ºr√ºn√º belirler"""
        _, ext = os.path.splitext(filename)
        
        if not ext:
            return "Dosya"
        
        ext = ext.lower()
        
        # Yaygƒ±n dosya t√ºrleri
        if ext in ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.webp']:
            return "Resim"
        elif ext in ['.mp4', '.avi', '.mov', '.wmv', '.mkv', '.flv', '.webm']:
            return "Video"
        elif ext in ['.mp3', '.wav', '.ogg', '.m4a', '.flac', '.aac']:
            return "Ses"
        elif ext in ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx']:
            return "Belge"
        elif ext in ['.txt', '.md', '.rtf', '.json', '.xml', '.html', '.css', '.js']:
            return "Metin"
        elif ext in ['.zip', '.rar', '.7z', '.tar', '.gz']:
            return "Ar≈üiv"
        elif ext in ['.exe', '.msi', '.bat', '.cmd']:
            return "Program"
        elif ext in ['.py', '.java', '.cpp', '.c', '.cs', '.php', '.rb', '.go', '.rs']:
            return "Kod"
        else:
            return ext
    
    def _on_item_double_click(self, event):
        """√ñƒüeye √ßift tƒ±klandƒ±ƒüƒ±nda a√ßma i≈ülemi"""
        item = self.file_tree.selection()[0]
        values = self.file_tree.item(item, "values")
        name = values[0]
        item_type = values[3]
        
        # Tam yolu olu≈ütur
        item_path = os.path.join(self.current_path, name)
        
        if item_type == "Klas√∂r":
            # Klas√∂r√º a√ß
            self.current_path = item_path
            self._populate_files()
        else:
            # Dosya t√ºr√ºne g√∂re uygun g√∂r√ºnt√ºleyici a√ß
            self._open_file(item_path)
    
    def _open_file(self, file_path):
        """Dosya t√ºr√ºne g√∂re uygun g√∂r√ºnt√ºleyici a√ßar"""
        _, ext = os.path.splitext(file_path)
        ext = ext.lower()
        
        try:
            # Resim dosyalarƒ±
            if ext in ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.webp']:
                ImageViewer(self, file_path)
            
            # Video dosyalarƒ±
            elif ext in ['.mp4', '.avi', '.mov', '.wmv', '.mkv', '.flv', '.webm']:
                VideoPlayer(self, file_path)
            
            # Metin dosyalarƒ±
            elif ext in ['.txt', '.md', '.rtf', '.json', '.xml', '.html', '.css', '.js']:
                TextEditor(self, file_path)
            
            # Diƒüer dosyalar - sistem varsayƒ±lan uygulamasƒ±yla a√ß
            else:
                # Windows
                if platform.system() == "Windows":
                    os.startfile(file_path)
                # macOS
                elif platform.system() == "Darwin":
                    subprocess.Popen(["open", file_path])
                # Linux
                else:
                    subprocess.Popen(["xdg-open", file_path])
        
        except Exception as e:
            messagebox.showerror("Hata", f"Dosya a√ßƒ±lamadƒ±: {str(e)}")
    
    def _go_back(self):
        """Geri d√ºƒümesi i≈ülevi"""
        if self.current_path != self.folder_path:
            # Ana klas√∂r sƒ±nƒ±rƒ±nƒ± a≈ümayacak ≈üekilde √ºst klas√∂re git
            parent = os.path.dirname(self.current_path)
            if os.path.commonpath([parent, self.folder_path]) == self.folder_path:
                self.current_path = parent
                self._populate_files()
    
    def _go_up(self):
        """√úst klas√∂re git d√ºƒümesi i≈ülevi"""
        # Ana klas√∂r sƒ±nƒ±rƒ±nƒ± a≈ümayacak ≈üekilde √ºst klas√∂re git
        parent = os.path.dirname(self.current_path)
        if os.path.commonpath([parent, self.folder_path]) == self.folder_path:
            self.current_path = parent
            self._populate_files()
    
    def _refresh(self):
        """Mevcut klas√∂r√º yenile"""
        self._populate_files()
    
    def _create_folder(self):
        """Yeni klas√∂r olu≈ütur"""
        folder_name = simpledialog_askstring("Yeni Klas√∂r", "Klas√∂r adƒ±:")
        if folder_name:
            try:
                new_folder_path = os.path.join(self.current_path, folder_name)
                os.makedirs(new_folder_path)
                self._refresh()
            except Exception as e:
                messagebox.showerror("Hata", f"Klas√∂r olu≈üturulamadƒ±: {str(e)}")
    
    def _show_context_menu(self, event):
        """Saƒü tƒ±k men√ºs√º g√∂ster"""
        # Tƒ±klanan √∂ƒüeyi se√ß
        item = self.file_tree.identify_row(event.y)
        if not item:
            return
        
        # √ñƒüeyi se√ß
        self.file_tree.selection_set(item)
        values = self.file_tree.item(item, "values")
        name = values[0]
        item_type = values[3]
        item_path = os.path.join(self.current_path, name)
        
        # Baƒülam men√ºs√º olu≈ütur
        context_menu = tk.Menu(self, tearoff=0)
        
        if item_type == "Klas√∂r":
            context_menu.add_command(label="A√ß", command=lambda: self._on_item_double_click(None))
            context_menu.add_command(label="Yeniden Adlandƒ±r", command=lambda: self._rename_item(item_path))
            context_menu.add_command(label="Sil", command=lambda: self._delete_item(item_path))
        else:
            context_menu.add_command(label="A√ß", command=lambda: self._on_item_double_click(None))
            context_menu.add_command(label="Yeniden Adlandƒ±r", command=lambda: self._rename_item(item_path))
            context_menu.add_command(label="Sil", command=lambda: self._delete_item(item_path))
        
        # Men√ºy√º g√∂ster
        context_menu.tk_popup(event.x_root, event.y_root)
    
    def _rename_item(self, item_path):
        """Dosya veya klas√∂r yeniden adlandƒ±rma"""
        old_name = os.path.basename(item_path)
        new_name = simpledialog_askstring("Yeniden Adlandƒ±r", "Yeni ad:", initialvalue=old_name)
        
        if new_name and new_name != old_name:
            try:
                new_path = os.path.join(os.path.dirname(item_path), new_name)
                os.rename(item_path, new_path)
                self._refresh()
            except Exception as e:
                messagebox.showerror("Hata", f"Yeniden adlandƒ±rƒ±lamadƒ±: {str(e)}")
    
    def _delete_item(self, item_path):
        """Dosya veya klas√∂r silme"""
        name = os.path.basename(item_path)
        is_dir = os.path.isdir(item_path)
        
        msg = f"'{name}' {'klas√∂r√ºn√º' if is_dir else 'dosyasƒ±nƒ±'} silmek istediƒüinizden emin misiniz?"
        if is_dir:
            msg += "\nKlas√∂r i√ßindeki t√ºm dosyalar silinecektir!"
        
        if messagebox.askyesno("Sil", msg):
            try:
                if is_dir:
                    shutil.rmtree(item_path)
                else:
                    os.remove(item_path)
                self._refresh()
            except Exception as e:
                messagebox.showerror("Hata", f"Silinemedi: {str(e)}")

class PrivateBrowser(ctk.CTkToplevel):
    def __init__(self, master):
        super().__init__(master)
        self.title("Gizli Tarayƒ±cƒ±")
        self.geometry("1000x700")
        self.minsize(800, 600)
        
        self.theme = master.theme
        self.configure(fg_color=self.theme.bg_primary)
        
        # Ana √ßer√ßeve
        main_frame = ctk.CTkFrame(self, fg_color=self.theme.bg_primary)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # √úst tarafta bulunan kontroller
        control_frame = ctk.CTkFrame(main_frame, fg_color=self.theme.bg_secondary)
        control_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Geri butonu
        self.back_btn = ctk.CTkButton(
            control_frame, text="‚¨ÖÔ∏è", command=self._go_back,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=40
        )
        self.back_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # ƒ∞leri butonu
        self.forward_btn = ctk.CTkButton(
            control_frame, text="‚û°Ô∏è", command=self._go_forward,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=40
        )
        self.forward_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # Yenile butonu
        self.refresh_btn = ctk.CTkButton(
            control_frame, text="üîÑ", command=self._refresh,
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=40
        )
        self.refresh_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # Ana sayfa butonu
        self.home_btn = ctk.CTkButton(
            control_frame, text="üè†", command=lambda: self._load_url("https://www.google.com"),
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=40
        )
        self.home_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # URL giri≈ü alanƒ±
        self.url_var = tk.StringVar()
        self.url_var.set("https://www.google.com")
        
        self.url_entry = ctk.CTkEntry(
            control_frame, 
            textvariable=self.url_var,
            width=400,
            height=32,
            border_width=1,
            corner_radius=8
        )
        self.url_entry.pack(side=tk.LEFT, padx=10, pady=5, fill=tk.X, expand=True)
        self.url_entry.bind("<Return>", lambda event: self._load_url(self.url_var.get()))
        
        # Git butonu
        self.go_btn = ctk.CTkButton(
            control_frame, text="Git", command=lambda: self._load_url(self.url_var.get()),
            fg_color=self.theme.accent, hover_color=self.theme.accent_hover,
            text_color="#FFFFFF", width=60
        )
        self.go_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # Kapat butonu
        self.close_btn = ctk.CTkButton(
            control_frame, text="‚úñ", command=self.destroy,
            fg_color=self.theme.error, hover_color="#D32F2F",
            text_color="#FFFFFF", width=40
        )
        self.close_btn.pack(side=tk.RIGHT, padx=5, pady=5)
        
        # Web tarayƒ±cƒ±
        browser_frame = ctk.CTkFrame(main_frame, fg_color=self.theme.bg_secondary)
        browser_frame.pack(fill=tk.BOTH, expand=True)
        
        # TkinterWeb kullanarak web tarayƒ±cƒ± olu≈ütur
        self.browser = tkinterweb.HtmlFrame(browser_frame, messages_enabled=False)
        self.browser.pack(fill=tk.BOTH, expand=True)
        
        # Durum √ßubuƒüu
        self.status_bar = ctk.CTkLabel(
            main_frame, 
            text="Gizli tarayƒ±cƒ± - bilgiler saklanmaz", 
            text_color=self.theme.text_secondary,
            anchor="w"
        )
        self.status_bar.pack(fill=tk.X, pady=(5, 0))
        
        # Gizli mod uyarƒ±sƒ±
        self.privacy_label = ctk.CTkLabel(
            main_frame,
            text="üîí Gizli tarayƒ±cƒ± aktif - ge√ßmi≈ü ve √ßerezler saklanmaz",
            text_color=self.theme.success,
            anchor="e"
        )
        self.privacy_label.pack(fill=tk.X, pady=(0, 5))
        
        # Ba≈ülangƒ±√ß sayfasƒ±nƒ± y√ºkle
        self._load_url("https://www.google.com")
        
        # Tarayƒ±cƒ± olay i≈üleyicileri
        self.browser.on_link_click(self._on_link_click)
        self.browser.on_done_loading(self._on_done_loading)
    
    def _load_url(self, url):
        """Belirtilen URL'yi y√ºkle"""
        if not url.startswith(("http://", "https://")):
            url = "https://" + url
        
        try:
            self.browser.load_website(url)
            self.url_var.set(url)
            self.status_bar.configure(text=f"Y√ºkleniyor: {url}")
        except Exception as e:
            self.status_bar.configure(text=f"Hata: {str(e)}")
    
    def _go_back(self):
        """Geri git"""
        try:
            self.browser.go_back()
        except:
            pass
    
    def _go_forward(self):
        """ƒ∞leri git"""
        try:
            self.browser.go_forward()
        except:
            pass
    
    def _refresh(self):
        """Sayfayƒ± yenile"""
        try:
            self.browser.reload()
        except:
            pass
    
    def _on_link_click(self, url):
        """Link tƒ±klama olayƒ±"""
        self.url_var.set(url)
        return True
    
    def _on_done_loading(self, success):
        """Sayfa y√ºkleme tamamlandƒ± olayƒ±"""
        if success:
            self.status_bar.configure(text=f"Y√ºklendi: {self.url_var.get()}")
        else:
            self.status_bar.configure(text=f"Y√ºkleme hatasƒ±: {self.url_var.get()}")

class FolderHiderApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Klas√∂r Gizleme Uygulamasƒ±")
        self.root.geometry("1000x700")
        self.root.minsize(800, 600)
        
        # Tema se√ßimi
        self.themes = {
            "A√ßƒ±k": ModernTheme.Light,
            "Koyu": ModernTheme.Dark,
            "Neon Koyu": ModernTheme.NeonDark,
            "Orman": ModernTheme.Forest,
            "Okyanus": ModernTheme.Ocean
        }
        
        # Varsayƒ±lan temayƒ± ayarla
        self.current_theme = "Koyu"
        self.theme = self.themes[self.current_theme]
        
        # CustomTkinter ayarlarƒ±
        ctk.set_appearance_mode("dark" if "Dark" in self.current_theme else "light")
        ctk.set_default_color_theme("blue")
        
        # Uygulama verilerinin saklanacaƒüƒ± dizin
        self.app_data_dir = os.path.join(os.getenv('APPDATA') or os.path.expanduser('~/.config'), 'FolderHider')
        if not os.path.exists(self.app_data_dir):
            os.makedirs(self.app_data_dir)
            
        self.config_file = os.path.join(self.app_data_dir, "hidden_folders.dat")
        self.settings_file = os.path.join(self.app_data_dir, "settings.json")
        self.hidden_dir = os.path.join(self.app_data_dir, "hidden")
        if not os.path.exists(self.hidden_dir):
            os.makedirs(self.hidden_dir)
            
        self.salt = b'klasorgizle_salt_456789'  # Daha g√º√ßl√º salt deƒüeri
        self.hidden_folders = {}
        self.current_password = None
        self.is_authenticated = False
        
        # Ayarlarƒ± y√ºkle
        self.settings = self._load_settings()
        
        # Tema ayarƒ±nƒ± uygula
        if "theme" in self.settings:
            self.current_theme = self.settings["theme"]
            self.theme = self.themes[self.current_theme]
        
        # UI kurulumu
        self.setup_ui()
        self.check_first_run()
        
    def _load_settings(self):
        """Kullanƒ±cƒ± ayarlarƒ±nƒ± y√ºkle"""
        if os.path.exists(self.settings_file):
            try:
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {"theme": "Koyu"}
        return {"theme": "Koyu"}
    
    def _save_settings(self):
        """Kullanƒ±cƒ± ayarlarƒ±nƒ± kaydet"""
        try:
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(self.settings, f)
        except Exception as e:
            print(f"Ayarlar kaydedilemedi: {str(e)}")
    
    def setup_ui(self):
        # Ana √ßer√ßeveler
        self.login_frame = ctk.CTkFrame(self.root)
        self.main_frame = ctk.CTkFrame(self.root)
        
        # Login √ßer√ßevesi
        login_header = ctk.CTkLabel(
            self.login_frame, 
            text="Klas√∂r Gizleme Uygulamasƒ±", 
            font=ctk.CTkFont(size=24, weight="bold")
        )
        login_header.pack(pady=(40, 20))
        
        # Logo veya ikon (burada bir metin olarak temsil edildi)
        logo_frame = ctk.CTkFrame(self.login_frame, fg_color="transparent")
        logo_frame.pack(pady=(0, 30))
        
        logo_text = ctk.CTkLabel(
            logo_frame, 
            text="üîí", 
            font=ctk.CTkFont(size=64)
        )
        logo_text.pack()
        
        # ≈ûifre giri≈ü alanƒ± ba≈ülƒ±ƒüƒ±
        password_label = ctk.CTkLabel(
            self.login_frame, 
            text="L√ºtfen ≈üifrenizi girin:",
            font=ctk.CTkFont(size=14)
        )
        password_label.pack(pady=(0, 10))
        
        # ≈ûifre giri≈ü alanƒ±
        self.password_entry = ctk.CTkEntry(
            self.login_frame, 
            show="‚Ä¢", 
            width=300,
            height=40,
            border_width=1,
            corner_radius=8,
            placeholder_text="≈ûifre"
        )
        self.password_entry.pack(pady=(0, 20))
        self.password_entry.bind("<Return>", lambda event: self.login())
        
        # Giri≈ü butonu
        login_button = ctk.CTkButton(
            self.login_frame, 
            text="Giri≈ü", 
            command=self.login,
            width=200,
            height=40,
            border_width=0,
            corner_radius=8,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        login_button.pack(pady=(0, 20))
        
        # Ana √ßer√ßeve tasarƒ±mƒ±
        # √úst panel
        top_panel = ctk.CTkFrame(self.main_frame)
        top_panel.pack(fill=tk.X, padx=10, pady=10)
        
        # Ba≈ülƒ±k ve logo
        header_label = ctk.CTkLabel(
            top_panel, 
            text="Klas√∂r Gizleme Y√∂neticisi", 
            font=ctk.CTkFont(size=20, weight="bold")
        )
        header_label.pack(side=tk.LEFT, padx=10)
        
        # Tema se√ßici
        theme_label = ctk.CTkLabel(top_panel, text="Tema:")
        theme_label.pack(side=tk.RIGHT, padx=(10, 5))
        
        self.theme_var = tk.StringVar(value=self.current_theme)
        self.theme_menu = ctk.CTkOptionMenu(
            top_panel,
            values=list(self.themes.keys()),
            variable=self.theme_var,
            command=self.change_theme,
            width=120
        )
        self.theme_menu.pack(side=tk.RIGHT)
        
        # ƒ∞√ßerik √ßer√ßevesi
        content_frame = ctk.CTkFrame(self.main_frame)
        content_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        # Sol panel - klas√∂r listesi
        left_panel = ctk.CTkFrame(content_frame, width=250)
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        left_panel.pack_propagate(False)  # Boyutu sabitle
        
        # Klas√∂r listesi ba≈ülƒ±ƒüƒ±
        list_header = ctk.CTkLabel(
            left_panel, 
            text="Gizli Klas√∂rler", 
            font=ctk.CTkFont(size=16, weight="bold")
        )
        list_header.pack(pady=(10, 5), anchor=tk.W, padx=10)
        
        # Klas√∂r listesi
        self.folder_list_frame = ctk.CTkScrollableFrame(left_panel)
        self.folder_list_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Saƒü panel - ana i√ßerik
        right_panel = ctk.CTkFrame(content_frame)
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # Butonlar √ßer√ßevesi
        button_panel = ctk.CTkFrame(right_panel)
        button_panel.pack(fill=tk.X, pady=(10, 20), padx=10)
        
        # Butonlar
        self.hide_btn = ctk.CTkButton(
            button_panel, 
            text="üîí Klas√∂r Gizle", 
            command=self.hide_folder,
            width=150,
            height=35,
            border_width=0,
            corner_radius=8
        )
        self.hide_btn.pack(side=tk.LEFT, padx=5)
        
        self.unhide_btn = ctk.CTkButton(
            button_panel, 
            text="üîì Se√ßili Klas√∂r√º G√∂ster", 
            command=self.unhide_folder,
            width=200,
            height=35,
            border_width=0,
            corner_radius=8
        )
        self.unhide_btn.pack(side=tk.LEFT, padx=5)
        
        self.open_btn = ctk.CTkButton(
            button_panel, 
            text="üìÇ Se√ßili Klas√∂r√º A√ß", 
            command=self.open_folder,
            width=200,
            height=35,
            border_width=0,
            corner_radius=8
        )
        self.open_btn.pack(side=tk.LEFT, padx=5)
        
        self.remove_btn = ctk.CTkButton(
            button_panel, 
            text="üóëÔ∏è Se√ßili Klas√∂r√º Sil", 
            command=self.remove_folder,
            width=200,
            height=35,
            fg_color="#E57373",
            hover_color="#EF5350",
            border_width=0,
            corner_radius=8
        )
        self.remove_btn.pack(side=tk.LEFT, padx=5)
        
        # Ayrƒ±ca √ßƒ±kƒ±≈ü ve tarayƒ±cƒ± butonlarƒ± i√ßin yeni bir panel
        special_buttons_panel = ctk.CTkFrame(right_panel)
        special_buttons_panel.pack(fill=tk.X, pady=(0, 10), padx=10)
        
        # Gizli tarayƒ±cƒ± butonu
        self.browser_btn = ctk.CTkButton(
            special_buttons_panel, 
            text="üåê Gizli Tarayƒ±cƒ±", 
            command=self.open_browser,
            width=150,
            height=35,
            fg_color="#7986CB",
            hover_color="#5C6BC0",
            border_width=0,
            corner_radius=8
        )
        self.browser_btn.pack(side=tk.LEFT, padx=5)
        
        # ≈ûifre deƒüi≈ütir butonu
        self.change_pw_btn = ctk.CTkButton(
            special_buttons_panel, 
            text="üîë ≈ûifre Deƒüi≈ütir", 
            command=self.change_password,
            width=150,
            height=35,
            fg_color="#4DB6AC",
            hover_color="#26A69A",
            border_width=0,
            corner_radius=8
        )
        self.change_pw_btn.pack(side=tk.LEFT, padx=5)
        
        # √áƒ±kƒ±≈ü butonu
        self.logout_btn = ctk.CTkButton(
            special_buttons_panel, 
            text="üö™ √áƒ±kƒ±≈ü", 
            command=self.logout,
            width=100,
            height=35,
            fg_color="#F44336",
            hover_color="#D32F2F",
            border_width=0,
            corner_radius=8
        )
        self.logout_btn.pack(side=tk.RIGHT, padx=5)
        
        # Se√ßili klas√∂r bilgisi
        self.info_frame = ctk.CTkFrame(right_panel)
        self.info_frame.pack(fill=tk.BOTH, expand=True, padx=10)
        
        # Se√ßili klas√∂r bilgisi ba≈ülƒ±ƒüƒ±
        selected_header = ctk.CTkLabel(
            self.info_frame, 
            text="Se√ßili Klas√∂r Bilgisi", 
            font=ctk.CTkFont(size=16, weight="bold")
        )
        selected_header.pack(pady=(10, 5), anchor=tk.W, padx=10)
        
        # ƒ∞√ßerik tablosu
        info_inner_frame = ctk.CTkFrame(self.info_frame)
        info_inner_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Klas√∂r bilgileri
        self.selected_name_var = tk.StringVar(value="")
        self.selected_path_var = tk.StringVar(value="")
        self.selected_date_var = tk.StringVar(value="")
        self.selected_size_var = tk.StringVar(value="")
        self.selected_status_var = tk.StringVar(value="")
        
        # Bilgi etiketleri
        info_grid = ctk.CTkFrame(info_inner_frame, fg_color="transparent")
        info_grid.pack(fill=tk.X, padx=10, pady=10, anchor=tk.N)
        
        ctk.CTkLabel(info_grid, text="Klas√∂r Adƒ±:", anchor="w").grid(row=0, column=0, sticky="w", pady=5)
        ctk.CTkLabel(info_grid, textvariable=self.selected_name_var, anchor="w").grid(row=0, column=1, sticky="w", padx=10, pady=5)
        
        ctk.CTkLabel(info_grid, text="Orijinal Konum:", anchor="w").grid(row=1, column=0, sticky="w", pady=5)
        ctk.CTkLabel(info_grid, textvariable=self.selected_path_var, anchor="w").grid(row=1, column=1, sticky="w", padx=10, pady=5)
        
        ctk.CTkLabel(info_grid, text="Gizlenme Tarihi:", anchor="w").grid(row=2, column=0, sticky="w", pady=5)
        ctk.CTkLabel(info_grid, textvariable=self.selected_date_var, anchor="w").grid(row=2, column=1, sticky="w", padx=10, pady=5)
        
        ctk.CTkLabel(info_grid, text="Boyut:", anchor="w").grid(row=3, column=0, sticky="w", pady=5)
        ctk.CTkLabel(info_grid, textvariable=self.selected_size_var, anchor="w").grid(row=3, column=1, sticky="w", padx=10, pady=5)
        
        ctk.CTkLabel(info_grid, text="Durum:", anchor="w").grid(row=4, column=0, sticky="w", pady=5)
        ctk.CTkLabel(info_grid, textvariable=self.selected_status_var, anchor="w").grid(row=4, column=1, sticky="w", padx=10, pady=5)
        
        # √ñnizleme alanƒ±
        preview_frame = ctk.CTkFrame(info_inner_frame)
        preview_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        preview_label = ctk.CTkLabel(
            preview_frame, 
            text="√ñnizleme", 
            font=ctk.CTkFont(size=14, weight="bold")
        )
        preview_label.pack(pady=(10, 5), anchor=tk.W, padx=10)
        
        self.preview_content = ctk.CTkTextbox(preview_frame, wrap="word", height=200)
        self.preview_content.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        # Durum √ßubuƒüu
        status_bar = ctk.CTkFrame(self.main_frame, height=25)
        status_bar.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        self.status_label = ctk.CTkLabel(
            status_bar, 
            text="Hazƒ±r", 
            anchor="w"
        )
        self.status_label.pack(side=tk.LEFT, padx=10)
        
        self.version_label = ctk.CTkLabel(
            status_bar, 
            text="v1.0.0", 
            anchor="e"
        )
        self.version_label.pack(side=tk.RIGHT, padx=10)
        
        # Ba≈ülangƒ±√ßta login ekranƒ±nƒ± g√∂ster
        self.login_frame.pack(fill=tk.BOTH, expand=True)
        
        # Temayƒ± uygula
        self.apply_theme()
    
    def check_first_run(self):
        """ƒ∞lk √ßalƒ±≈ütƒ±rma kontrol√º ve ≈üifre olu≈üturma"""
        if not os.path.exists(self.config_file):
            self.login_frame.pack_forget()
            self.setup_password()
        
    def setup_password(self):
        """ƒ∞lk √ßalƒ±≈ütƒ±rma i√ßin ≈üifre olu≈üturma penceresi"""
        self.setup_frame = ctk.CTkFrame(self.root)
        self.setup_frame.pack(fill=tk.BOTH, expand=True)
        
        setup_header = ctk.CTkLabel(
            self.setup_frame, 
            text="Ho≈ü Geldiniz!", 
            font=ctk.CTkFont(size=24, weight="bold")
        )
        setup_header.pack(pady=(40, 10))
        
        setup_info = ctk.CTkLabel(
            self.setup_frame,
            text="Klas√∂r Gizleme Uygulamasƒ±nƒ± ilk kez kullanƒ±yorsunuz.\nL√ºtfen bir ana ≈üifre belirleyin.",
            font=ctk.CTkFont(size=14)
        )
        setup_info.pack(pady=(0, 30))
        
        # ≈ûifre giri≈ü alanƒ±
        password_frame = ctk.CTkFrame(self.setup_frame, fg_color="transparent")
        password_frame.pack(pady=(0, 20))
        
        ctk.CTkLabel(password_frame, text="≈ûifre:").grid(row=0, column=0, padx=10, pady=10, sticky="e")
        self.new_password = ctk.CTkEntry(password_frame, show="‚Ä¢", width=250)
        self.new_password.grid(row=0, column=1, padx=10, pady=10)
        
        ctk.CTkLabel(password_frame, text="≈ûifre Tekrar:").grid(row=1, column=0, padx=10, pady=10, sticky="e")
        self.confirm_password = ctk.CTkEntry(password_frame, show="‚Ä¢", width=250)
        self.confirm_password.grid(row=1, column=1, padx=10, pady=10)
        
        # ≈ûifre g√ºvenlik ipu√ßlarƒ±
        tips_frame = ctk.CTkFrame(self.setup_frame, fg_color="transparent")
        tips_frame.pack(pady=(0, 20))
        
        tips_text = """G√ºvenli bir ≈üifre i√ßin:
- En az 8 karakter kullanƒ±n
- B√ºy√ºk ve k√º√ß√ºk harfler ekleyin
- Sayƒ±lar ve √∂zel karakterler kullanƒ±n
- Kolayca tahmin edilebilir bilgiler kullanmayƒ±n"""
        
        tips_label = ctk.CTkLabel(
            tips_frame,
            text=tips_text,
            justify=tk.LEFT,
            font=ctk.CTkFont(size=12)
        )
        tips_label.pack(padx=20)
        
        # Olu≈ütur butonu
        create_button = ctk.CTkButton(
            self.setup_frame,
            text="≈ûifre Olu≈ütur",
            command=self.create_password,
            width=200,
            height=40,
            corner_radius=8
        )
        create_button.pack(pady=(10, 20))
    
    def create_password(self):
        """Yeni ≈üifre olu≈ütur"""
        password = self.new_password.get()
        confirm = self.confirm_password.get()
        
        if not password:
            messagebox.showerror("Hata", "L√ºtfen bir ≈üifre girin.")
            return
            
        if password != confirm:
            messagebox.showerror("Hata", "≈ûifreler e≈üle≈ümiyor.")
            return
            
        if len(password) < 6:
            messagebox.showerror("Hata", "≈ûifre en az 6 karakter olmalƒ±dƒ±r.")
            return
        
        # ≈ûifreyi kaydet
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=self.salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
        
        # Bo≈ü hidden_folders s√∂zl√ºƒü√ºn√º ≈üifrele ve kaydet
        cipher_suite = Fernet(key)
        encrypted_data = cipher_suite.encrypt(json.dumps({}).encode())
        
        with open(self.config_file, 'wb') as f:
            f.write(encrypted_data)
        
        # Kurulum ekranƒ±nƒ± kapat, login ekranƒ±nƒ± g√∂ster
        self.setup_frame.pack_forget()
        self.login_frame.pack(fill=tk.BOTH, expand=True)
        messagebox.showinfo("Ba≈üarƒ±lƒ±", "≈ûifreniz ba≈üarƒ±yla olu≈üturuldu.\nL√ºtfen giri≈ü yapƒ±n.")
    
    def login(self):
        """Kullanƒ±cƒ± giri≈üi"""
        password = self.password_entry.get()
        
        if not password:
            messagebox.showerror("Hata", "L√ºtfen ≈üifrenizi girin.")
            return
        
        try:
            # ≈ûifreyi doƒürula
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,
                salt=self.salt,
                iterations=100000,
            )
            key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
            
            with open(self.config_file, 'rb') as f:
                encrypted_data = f.read()
            
            cipher_suite = Fernet(key)
            decrypted_data = cipher_suite.decrypt(encrypted_data).decode()
            self.hidden_folders = json.loads(decrypted_data)
            
            # Ba≈üarƒ±lƒ± giri≈ü
            self.current_password = password
            self.is_authenticated = True
            self.login_frame.pack_forget()
            self.main_frame.pack(fill=tk.BOTH, expand=True)
            
            # Klas√∂r listesini g√ºncelle
            self.update_folder_list()
            
            # Durum √ßubuƒüunu g√ºncelle
            self.status_label.configure(text="Giri≈ü ba≈üarƒ±lƒ±")
            
        except Exception as e:
            messagebox.showerror("Hata", "Yanlƒ±≈ü ≈üifre veya bozuk veri.")
            self.password_entry.delete(0, tk.END)
    
    def logout(self):
        """Oturumu kapat"""
        self.is_authenticated = False
        self.current_password = None
        self.hidden_folders = {}
        
        # UI sƒ±fƒ±rla
        self.main_frame.pack_forget()
        self.password_entry.delete(0, tk.END)
        self.login_frame.pack(fill=tk.BOTH, expand=True)
    
    def change_password(self):
        """≈ûifre deƒüi≈ütirme penceresi"""
        if not self.is_authenticated:
            return
            
        password_window = ctk.CTkToplevel(self.root)
        password_window.title("≈ûifre Deƒüi≈ütir")
        password_window.geometry("400x300")
        password_window.resizable(False, False)
        password_window.transient(self.root)
        password_window.grab_set()
        
        # Tema ayarƒ±
        password_window.configure(fg_color=self.theme.bg_primary)
        
        # ƒ∞√ßerik
        header = ctk.CTkLabel(
            password_window, 
            text="≈ûifre Deƒüi≈ütir", 
            font=ctk.CTkFont(size=18, weight="bold")
        )
        header.pack(pady=(20, 15))
        
        form_frame = ctk.CTkFrame(password_window, fg_color="transparent")
        form_frame.pack(pady=10)
        
        # Eski ≈üifre
        ctk.CTkLabel(form_frame, text="Mevcut ≈ûifre:").grid(row=0, column=0, padx=10, pady=10, sticky="e")
        old_password = ctk.CTkEntry(form_frame, show="‚Ä¢", width=200)
        old_password.grid(row=0, column=1, padx=10, pady=10)
        
        # Yeni ≈üifre
        ctk.CTkLabel(form_frame, text="Yeni ≈ûifre:").grid(row=1, column=0, padx=10, pady=10, sticky="e")
        new_password = ctk.CTkEntry(form_frame, show="‚Ä¢", width=200)
        new_password.grid(row=1, column=1, padx=10, pady=10)
        
        # Yeni ≈üifre tekrar
        ctk.CTkLabel(form_frame, text="Yeni ≈ûifre Tekrar:").grid(row=2, column=0, padx=10, pady=10, sticky="e")
        confirm_password = ctk.CTkEntry(form_frame, show="‚Ä¢", width=200)
        confirm_password.grid(row=2, column=1, padx=10, pady=10)
        
        # Butonlar
        button_frame = ctk.CTkFrame(password_window, fg_color="transparent")
        button_frame.pack(pady=15)
        
        def change():
            old_pw = old_password.get()
            new_pw = new_password.get()
            confirm_pw = confirm_password.get()
            
            # Kontroller
            if not old_pw or not new_pw or not confirm_pw:
                messagebox.showerror("Hata", "L√ºtfen t√ºm alanlarƒ± doldurun.")
                return
                
            if old_pw != self.current_password:
                messagebox.showerror("Hata", "Mevcut ≈üifre yanlƒ±≈ü.")
                return
                
            if new_pw != confirm_pw:
                messagebox.showerror("Hata", "Yeni ≈üifreler e≈üle≈ümiyor.")
                return
                
            if len(new_pw) < 6:
                messagebox.showerror("Hata", "≈ûifre en az 6 karakter olmalƒ±dƒ±r.")
                return
                
            # ≈ûifre deƒüi≈ütirme
            try:
                # Yeni ≈üifre ile veriyi ≈üifrele
                kdf = PBKDF2HMAC(
                    algorithm=hashes.SHA256(),
                    length=32,
                    salt=self.salt,
                    iterations=100000,
                )
                key = base64.urlsafe_b64encode(kdf.derive(new_pw.encode()))
                
                cipher_suite = Fernet(key)
                encrypted_data = cipher_suite.encrypt(json.dumps(self.hidden_folders).encode())
                
                with open(self.config_file, 'wb') as f:
                    f.write(encrypted_data)
                
                self.current_password = new_pw
                messagebox.showinfo("Ba≈üarƒ±lƒ±", "≈ûifreniz ba≈üarƒ±yla deƒüi≈ütirildi.")
                password_window.destroy()
                
            except Exception as e:
                messagebox.showerror("Hata", f"≈ûifre deƒüi≈ütirilemedi: {str(e)}")
        
        save_button = ctk.CTkButton(
            button_frame,
            text="Deƒüi≈ütir",
            command=change,
            width=100,
            height=35,
            fg_color=self.theme.accent,
            hover_color=self.theme.accent_hover
        )
        save_button.pack(side=tk.LEFT, padx=5)
        
        cancel_button = ctk.CTkButton(
            button_frame,
            text="ƒ∞ptal",
            command=password_window.destroy,
            width=100,
            height=35,
            fg_color=self.theme.error,
            hover_color="#D32F2F"
        )
        cancel_button.pack(side=tk.LEFT, padx=5)
    
    def apply_theme(self):
        """Tema renklerini uygula"""
        self.theme = self.themes[self.current_theme]
        
        # CustomTkinter g√∂r√ºn√ºm modu
        ctk.set_appearance_mode("dark" if "Dark" in self.current_theme or "Neon" in self.current_theme else "light")
        
        # Ana pencere arka planƒ±
        self.root.configure(bg=self.theme.bg_primary)
        
        # Login frame
        self.login_frame.configure(fg_color=self.theme.bg_primary)
        
        # Main frame
        self.main_frame.configure(fg_color=self.theme.bg_primary)
        
        # Tema deƒüi≈üikliƒüini ayarlara kaydet
        self.settings["theme"] = self.current_theme
        self._save_settings()
        
        # Klas√∂r listesini g√ºncelle (tema deƒüi≈üikliƒüini yansƒ±tmak i√ßin)
        if self.is_authenticated:
            self.update_folder_list()
    
    def change_theme(self, theme_name):
        """Temayƒ± deƒüi≈ütir"""
        self.current_theme = theme_name
        self.apply_theme()
    
    def update_folder_list(self):
        """Gizli klas√∂r listesini g√ºnceller"""
        # √ñnceki klas√∂r butonlarƒ±nƒ± temizle
        for widget in self.folder_list_frame.winfo_children():
            widget.destroy()
        
        if not self.hidden_folders:
            no_folders_label = ctk.CTkLabel(
                self.folder_list_frame, 
                text="Hen√ºz gizli klas√∂r yok",
                text_color=self.theme.text_secondary
            )
            no_folders_label.pack(pady=50)
            return
        
        # Her gizli klas√∂r i√ßin bir buton olu≈ütur
        for folder_id, folder_info in self.hidden_folders.items():
            folder_name = folder_info.get("name", "Bilinmeyen Klas√∂r")
            
            frame = ctk.CTkFrame(self.folder_list_frame, fg_color="transparent")
            frame.pack(fill=tk.X, pady=2)
            
            # Klas√∂r butonu
            btn = ctk.CTkButton(
                frame,
                text=folder_name,
                command=lambda fid=folder_id: self.select_folder(fid),
                anchor="w",
                fg_color="transparent",
                text_color=self.theme.text_primary,
                hover_color=self.theme.highlight,
                height=30,
                border_spacing=5
            )
            btn.pack(fill=tk.X)
        
        # Se√ßili klas√∂r bilgilerini g√ºncelle
        self.clear_selection()
    
    def select_folder(self, folder_id):
        """Bir klas√∂r√º se√ß ve bilgilerini g√∂ster"""
        if folder_id in self.hidden_folders:
            folder_info = self.hidden_folders[folder_id]
            
            # Klas√∂r bilgilerini g√∂ster
            self.selected_name_var.set(folder_info.get("name", ""))
            self.selected_path_var.set(folder_info.get("original_path", ""))
            
            hide_date = folder_info.get("hide_date", "")
            self.selected_date_var.set(hide_date)
            
            size = folder_info.get("size", 0)
            size_str = self.format_size(size)
            self.selected_size_var.set(size_str)
            
            self.selected_status_var.set("Gizli")
            
            # √ñnizleme i√ßeriƒüini g√ºncelle
            hidden_path = os.path.join(self.hidden_dir, folder_id)
            preview_text = self.get_folder_preview(hidden_path)
            self.preview_content.delete("1.0", tk.END)
            self.preview_content.insert("1.0", preview_text)
            
            # Buton durumlarƒ±nƒ± g√ºncelle
            self.unhide_btn.configure(state="normal")
            self.open_btn.configure(state="normal")
            self.remove_btn.configure(state="normal")
            
            # Se√ßilen klas√∂r ID'sini sakla
            self.selected_folder_id = folder_id
        
    def clear_selection(self):
        """Se√ßili klas√∂r bilgilerini temizle"""
        self.selected_name_var.set("")
        self.selected_path_var.set("")
        self.selected_date_var.set("")
        self.selected_size_var.set("")
        self.selected_status_var.set("")
        
        self.preview_content.delete("1.0", tk.END)
        
        # Butonlarƒ± devre dƒ±≈üƒ± bƒ±rak
        self.unhide_btn.configure(state="disabled")
        self.open_btn.configure(state="disabled")
        self.remove_btn.configure(state="disabled")
        
        self.selected_folder_id = None
    
    def get_folder_preview(self, folder_path):
        """Klas√∂r i√ßeriƒüinin √∂nizlemesini olu≈üturur"""
        preview_text = "Klas√∂r ƒ∞√ßeriƒüi:\n\n"
        
        try:
            file_count = 0
            dir_count = 0
            
            for root, dirs, files in os.walk(folder_path):
                rel_path = os.path.relpath(root, folder_path)
                if rel_path != ".":
                    preview_text += f"üìÅ {rel_path}\n"
                    dir_count += 1
                
                for file in files:
                    if file_count < 20:  # √áok fazla dosya g√∂stermeyelim
                        file_path = os.path.join(rel_path, file)
                        if rel_path == ".":
                            preview_text += f"üìÑ {file}\n"
                        else:
                            preview_text += f"  üìÑ {file_path}\n"
                    file_count += 1
            
            total_count = file_count + dir_count
            
            if file_count > 20:
                preview_text += f"\n... ve {file_count - 20} dosya daha\n"
            
            preview_text += f"\nToplam: {dir_count} klas√∂r, {file_count} dosya"
            
        except Exception as e:
            preview_text = f"√ñnizleme y√ºklenemedi: {str(e)}"
        
        return preview_text
    
    def format_size(self, size_bytes):
        """Dosya boyutunu okunaklƒ± formata d√∂n√º≈üt√ºr√ºr"""
        if size_bytes < 1024:
            return f"{size_bytes} B"
        elif size_bytes < 1024 * 1024:
            return f"{size_bytes/1024:.1f} KB"
        elif size_bytes < 1024 * 1024 * 1024:
            return f"{size_bytes/(1024*1024):.1f} MB"
        else:
            return f"{size_bytes/(1024*1024*1024):.1f} GB"
    
    def get_folder_size(self, folder_path):
        """Klas√∂r boyutunu hesaplar"""
        total_size = 0
        
        try:
            for dirpath, dirnames, filenames in os.walk(folder_path):
                for f in filenames:
                    fp = os.path.join(dirpath, f)
                    if os.path.exists(fp):
                        total_size += os.path.getsize(fp)
        except:
            pass
            
        return total_size
    
    def hide_folder(self):
        """Yeni bir klas√∂r√º gizle"""
        if not self.is_authenticated:
            return
            
        # Klas√∂r se√ßme diyaloƒüu
        folder_path = filedialog.askdirectory(title="Gizlemek ƒ∞stediƒüiniz Klas√∂r√º Se√ßin")
        
        if not folder_path:
            return
            
        # Klas√∂r adƒ±nƒ± al
        folder_name = os.path.basename(folder_path)
        
        # Klas√∂r zaten gizli mi kontrol et
        for folder_id, info in self.hidden_folders.items():
            if info.get("original_path") == folder_path:
                messagebox.showerror("Hata", "Bu klas√∂r zaten gizlenmi≈ü.")
                return
        
        try:
            # Yeni benzersiz ID olu≈ütur
            folder_id = self.generate_id()
            
            # Gizli klas√∂r i√ßin hedef yol
            target_path = os.path.join(self.hidden_dir, folder_id)
            
            # Klas√∂r√º kopyala
            shutil.copytree(folder_path, target_path)
            
            # Klas√∂r bilgilerini kaydet
            size = self.get_folder_size(folder_path)
            hide_date = datetime.now().strftime('%d.%m.%Y %H:%M')
            
            self.hidden_folders[folder_id] = {
                "name": folder_name,
                "original_path": folder_path,
                "hide_date": hide_date,
                "size": size
            }
            
            # Orijinal klas√∂r√º sil
            shutil.rmtree(folder_path)
            
            # Deƒüi≈üiklikleri kaydet
            self.save_hidden_folders()
            
            # UI g√ºncelle
            self.update_folder_list()
            self.status_label.configure(text=f"{folder_name} klas√∂r√º ba≈üarƒ±yla gizlendi")
            messagebox.showinfo("Ba≈üarƒ±lƒ±", f"{folder_name} klas√∂r√º ba≈üarƒ±yla gizlendi.")
            
        except Exception as e:
            messagebox.showerror("Hata", f"Klas√∂r gizlenemedi: {str(e)}")
    
    def unhide_folder(self):
        """Se√ßili klas√∂r√º g√∂ster (orijinal konumuna geri y√ºkle)"""
        if not self.is_authenticated or not self.selected_folder_id:
            return
            
        folder_id = self.selected_folder_id
        folder_info = self.hidden_folders[folder_id]
        
        folder_name = folder_info.get("name", "")
        original_path = folder_info.get("original_path", "")
        
        # Orijinal klas√∂r yolu hala mevcut mu?
        if os.path.exists(original_path):
            answer = messagebox.askyesno(
                "Dikkat", 
                f"Orijinal konum '{original_path}' zaten mevcut.\n√úzerine yazmak istiyor musunuz?"
            )
            if not answer:
                return
        
        try:
            # Gizli klas√∂r yolu
            hidden_path = os.path.join(self.hidden_dir, folder_id)
            
            # Klas√∂r√º orijinal konumuna kopyala
            shutil.copytree(hidden_path, original_path)
            
            # Gizli klas√∂r√º sil
            shutil.rmtree(hidden_path)
            
            # Bilgileri listeden kaldƒ±r
            del self.hidden_folders[folder_id]
            
            # Deƒüi≈üiklikleri kaydet
            self.save_hidden_folders()
            
            # UI g√ºncelle
            self.update_folder_list()
            self.status_label.configure(text=f"{folder_name} klas√∂r√º orijinal konumuna geri y√ºklendi")
            messagebox.showinfo("Ba≈üarƒ±lƒ±", f"{folder_name} klas√∂r√º orijinal konumuna geri y√ºklendi.")
            
        except Exception as e:
            messagebox.showerror("Hata", f"Klas√∂r g√∂sterilemedi: {str(e)}")
    
    def open_folder(self):
        """Se√ßili gizli klas√∂r√º a√ß"""
        if not self.is_authenticated or not self.selected_folder_id:
            return
            
        folder_id = self.selected_folder_id
        hidden_path = os.path.join(self.hidden_dir, folder_id)
        
        if os.path.exists(hidden_path):
            # Klas√∂r gezgini a√ß
            FileExplorer(self, hidden_path, folder_id)
        else:
            messagebox.showerror("Hata", "Klas√∂r a√ßƒ±lamadƒ±.")
    
    def remove_folder(self):
        """Se√ßili gizli klas√∂r√º kalƒ±cƒ± olarak sil"""
        if not self.is_authenticated or not self.selected_folder_id:
            return
            
        folder_id = self.selected_folder_id
        folder_info = self.hidden_folders[folder_id]
        folder_name = folder_info.get("name", "")
        
        # Onay iste
        answer = messagebox.askyesno(
            "Dikkat", 
            f"'{folder_name}' klas√∂r√ºn√º kalƒ±cƒ± olarak silmek istediƒüinizden emin misiniz?\n"
            "Bu i≈ülem geri alƒ±namaz!"
        )
        
        if not answer:
            return
            
        try:
            # Gizli klas√∂r yolu
            hidden_path = os.path.join(self.hidden_dir, folder_id)
            
            # Klas√∂r√º sil
            if os.path.exists(hidden_path):
                shutil.rmtree(hidden_path)
            
            # Bilgileri listeden kaldƒ±r
            del self.hidden_folders[folder_id]
            
            # Deƒüi≈üiklikleri kaydet
            self.save_hidden_folders()
            
            # UI g√ºncelle
            self.update_folder_list()
            self.status_label.configure(text=f"{folder_name} klas√∂r√º kalƒ±cƒ± olarak silindi")
            messagebox.showinfo("Ba≈üarƒ±lƒ±", f"{folder_name} klas√∂r√º kalƒ±cƒ± olarak silindi.")
            
        except Exception as e:
            messagebox.showerror("Hata", f"Klas√∂r silinemedi: {str(e)}")
            
    def open_folder(self):
        """Se√ßili gizli klas√∂r√º a√ß"""
        if not self.is_authenticated or not self.selected_folder_id:
            return
        
        folder_id = self.selected_folder_id
        folder_path = os.path.join(self.hidden_dir, folder_id)
        
        # Dosya gezginini a√ß
        FileExplorer(self.root, folder_path, hidden_id=folder_id)

    def restore_folder(self):
        """Se√ßili gizli klas√∂r√º geri y√ºkle"""

        if not self.is_authenticated or not self.selected_folder_id:
            return

        folder_id = self.selected_folder_id
        folder_info = self.hidden_folders[folder_id]
        folder_name = folder_info.get("name", "")
        original_path = folder_info.get("original_path", "")

        # Hedef yolun uygunluƒüunu kontrol et
        if not original_path or not os.path.exists(os.path.dirname(original_path)):
            messagebox.showerror("Hata", "Klas√∂r√ºn orijinal konumu bulunamadƒ± veya ge√ßersiz.")
            return

        # Onay iste
        answer = messagebox.askyesno(
            "Geri Y√ºkle",
            f"'{folder_name}' klas√∂r√ºn√º orijinal konumuna geri y√ºklemek istediƒüinizden emin misiniz?"
        )

        if not answer:
            return

        try:
            # Gizli klas√∂r yolu
            hidden_path = os.path.join(self.hidden_dir, folder_id)

            # Orijinal yola ta≈üƒ±
            shutil.move(hidden_path, original_path)

            # Bilgileri listeden kaldƒ±r
            del self.hidden_folders[folder_id]

            # Deƒüi≈üiklikleri kaydet
            self.save_hidden_folders()

            # UI g√ºncelle
            self.update_folder_list()
            self.status_label.configure(text=f"'{folder_name}' klas√∂r√º geri y√ºklendi.")
            messagebox.showinfo("Ba≈üarƒ±lƒ±", f"'{folder_name}' klas√∂r√º ba≈üarƒ±yla geri y√ºklendi.")

        except Exception as e:
            messagebox.showerror("Hata", f"Klas√∂r geri y√ºklenemedi: {str(e)}")

    def change_password(self):
        """≈ûifre deƒüi≈ütirme"""

        new_password = simpledialog.askstring("≈ûifre Deƒüi≈ütir", "Yeni ≈üifre:", show="‚Ä¢")
        if new_password:
            self.current_password = self.hash_password(new_password)
            self.save_password()
            messagebox.showinfo("Ba≈üarƒ±lƒ±", "≈ûifre ba≈üarƒ±yla deƒüi≈ütirildi.")

    def setup_main_ui(self):
        """Ana uygulama aray√ºz√ºn√º kur"""

        # Buton stilleri
        button_font = ctk.CTkFont(size=14, weight="bold")
        button_fg_color = self.theme.accent
        button_hover_color = self.theme.accent_hover
        button_text_color = "#FFFFFF"

        # Sol √ßer√ßeve (klas√∂r listesi)
        left_frame = ctk.CTkFrame(self.main_frame, fg_color=self.theme.bg_secondary)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(10, 5), pady=10)

        # Saƒü √ßer√ßeve (i≈ülemler)
        right_frame = ctk.CTkFrame(self.main_frame, fg_color=self.theme.bg_secondary)
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 10), pady=10)

        # Klas√∂r Listesi
        folder_list_label = ctk.CTkLabel(left_frame, text="Gizli Klas√∂rler", font=ctk.CTkFont(size=18, weight="bold"), text_color=self.theme.text_primary)
        folder_list_label.pack(pady=(10, 0))

        self.folder_listbox = tk.Listbox(
            left_frame,
            bg=self.theme.bg_primary,
            fg=self.theme.text_primary,
            selectbackground=self.theme.accent,
            selectforeground="#FFFFFF",
            font=("Segoe UI" if platform.system() == "Windows" else "Helvetica", 12),
            borderwidth=0,
            highlightthickness=0
        )
        self.folder_listbox.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        self.folder_listbox.bind('<<ListboxSelect>>', self.on_folder_select)

        # ƒ∞≈ülem Butonlarƒ±
        button_frame = ctk.CTkFrame(right_frame, fg_color=self.theme.bg_secondary)
        button_frame.pack(pady=10, padx=10, fill=tk.X)

        self.add_folder_button = ctk.CTkButton(
            button_frame, text="Klas√∂r Ekle", command=self.add_folder,
            font=button_font, fg_color=button_fg_color, hover_color=button_hover_color, text_color=button_text_color
        )
        self.add_folder_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        self.open_folder_button = ctk.CTkButton(
            button_frame, text="Klas√∂r√º A√ß", command=self.open_folder,
            font=button_font, fg_color=button_fg_color, hover_color=button_hover_color, text_color=button_text_color
        )
        self.open_folder_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        self.restore_folder_button = ctk.CTkButton(
            button_frame, text="Klas√∂r√º Geri Y√ºkle", command=self.restore_folder,
            font=button_font, fg_color=button_fg_color, hover_color=button_hover_color, text_color=button_text_color
        )
        self.restore_folder_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        self.remove_folder_button = ctk.CTkButton(
            button_frame, text="Klas√∂r√º Sil", command=self.remove_folder,
            font=button_font, fg_color=self.theme.error, hover_color="#D32F2F", text_color=button_text_color
        )
        self.remove_folder_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        self.change_password_button = ctk.CTkButton(
            button_frame, text="≈ûifreyi Deƒüi≈ütir", command=self.change_password,
            font=button_font, fg_color=button_fg_color, hover_color=button_hover_color, text_color=button_text_color
        )
        self.change_password_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        self.browse_button = ctk.CTkButton(
            button_frame, text="Gizli Tarayƒ±cƒ±", command=self.open_private_browser,
            font=button_font, fg_color=button_fg_color, hover_color=button_hover_color, text_color=button_text_color
        )
        self.browse_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        # Durum √ßubuƒüu
        self.status_label = ctk.CTkLabel(
            self.main_frame, text="Hazƒ±r",
            text_color=self.theme.text_secondary,
            anchor="w"
        )
        self.status_label.pack(side=tk.BOTTOM, fill=tk.X, padx=10, pady=(0, 10))

        # Klas√∂r listesini doldur
        self.update_folder_list()

    def on_folder_select(self, event):
        """Klas√∂r se√ßildiƒüinde bilgileri g√∂ster"""
        try:
            selection = self.folder_listbox.curselection()
            if selection:
                index = selection[0]
                folder_id = list(self.hidden_folders.keys())[index]
                self.selected_folder_id = folder_id
                folder_name = self.hidden_folders[folder_id]["name"]
                self.status_label.configure(text=f"Se√ßili: {folder_name}")
            else:
                self.selected_folder_id = None
                self.status_label.configure(text="Hazƒ±r")
        except Exception as e:
            print(f"Klas√∂r se√ßme hatasƒ±: {e}")

    def update_folder_list(self):
        """Klas√∂r listesini g√ºncelle"""

        self.folder_listbox.delete(0, tk.END)
        for folder_id, folder_info in self.hidden_folders.items():
            self.folder_listbox.insert(tk.END, folder_info["name"])

        if self.hidden_folders:
            self.status_label.configure(text=f"{len(self.hidden_folders)} klas√∂r kayƒ±tlƒ±")
        else:
            self.status_label.configure(text="Hi√ß klas√∂r kayƒ±tlƒ± deƒüil")

    def open_private_browser(self):
        """Gizli tarayƒ±cƒ±yƒ± a√ß"""
        PrivateBrowser(self.root)

    def check_first_run(self):
        """Uygulamanƒ±n ilk kez √ßalƒ±≈üƒ±p √ßalƒ±≈ümadƒ±ƒüƒ±nƒ± kontrol et"""

        if not os.path.exists(self.config_file):
            self.show_first_run_dialog()
        else:
            self.load_hidden_folders()
            self.show_login_screen()

    def show_first_run_dialog(self):
        """ƒ∞lk √ßalƒ±≈ütƒ±rma ekranƒ±nƒ± g√∂ster"""

        dialog = ctk.CTkToplevel(self.root)
        dialog.title("Ho≈ü Geldiniz")
        dialog.geometry("400x300")
        dialog.resizable(False, False)

        frame = ctk.CTkFrame(dialog, fg_color=self.theme.bg_primary)
        frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        label = ctk.CTkLabel(
            frame,
            text="Bu uygulama ilk kez √ßalƒ±≈ütƒ±rƒ±lƒ±yor.\nL√ºtfen bir ≈üifre belirleyin:",
            font=ctk.CTkFont(size=16),
            text_color=self.theme.text_primary
        )
        label.pack(pady=(20, 10))

        password_entry = ctk.CTkEntry(
            frame,
            show="‚Ä¢",
            width=200,
            font=ctk.CTkFont(size=14),
            fg_color=self.theme.bg_secondary,
            text_color=self.theme.text_primary
        )
        password_entry.pack(pady=10)

        confirm_button = ctk.CTkButton(
            frame,
            text="Onayla",
            command=lambda: self.on_first_run_confirm(dialog, password_entry.get()),
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.theme.accent,
            hover_color=self.theme.accent_hover,
            text_color="#FFFFFF"
        )
        confirm_button.pack(pady=20)

        dialog.wait_window()  # Diyalog penceresini bekle

    def on_first_run_confirm(self, dialog, password):
        """ƒ∞lk √ßalƒ±≈ütƒ±rma ≈üifre onaylama"""

        if password:
            self.current_password = self.hash_password(password)
            self.save_password()
            dialog.destroy()
            self.show_login_screen()
        else:
            messagebox.showerror("Hata", "L√ºtfen bir ≈üifre girin.")

    def show_login_screen(self):
        """Giri≈ü ekranƒ±nƒ± g√∂ster"""

        self.main_frame.pack_forget()  # Ana ekranƒ± gizle
        self.login_frame.pack(fill=tk.BOTH, expand=True)

        def on_login():
            password = self.password_entry.get()
            if self.verify_password(password):
                self.is_authenticated = True
                self.login_frame.pack_forget()
                self.setup_main_ui()
                self.main_frame.pack(fill=tk.BOTH, expand=True)
            else:
                messagebox.showerror("Hata", "Yanlƒ±≈ü ≈üifre.")

        # Mevcut giri≈ü butonunu kaldƒ±r
        for widget in self.login_frame.winfo_children():
            if isinstance(widget, ctk.CTkButton) and widget.cget("text") == "Giri≈ü":
                widget.destroy()
                break

        # Yeni giri≈ü butonu olu≈ütur ve yerle≈ütir
        login_button = ctk.CTkButton(
            self.login_frame,
            text="Giri≈ü",
            command=on_login,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.theme.accent,
            hover_color=self.theme.accent_hover,
            text_color="#FFFFFF"
        )
        login_button.pack(pady=(20, 40))

    def hash_password(self, password):
        """≈ûifreyi hash'le"""

        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            iterations=100000,
            salt=self.salt,
            length=32
        )
        return base64.urlsafe_b64encode(kdf.derive(password.encode())).decode()

    def verify_password(self, password):
        """≈ûifreyi doƒürula"""

        hashed_password = self.hash_password(password)
        return hashed_password == self.current_password

    def save_password(self):
        """≈ûifreyi kaydet"""

        with open(self.config_file, 'w', encoding='utf-8') as f:
            f.write(self.current_password)

    def load_password(self):
        """≈ûifreyi y√ºkle"""

        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                self.current_password = f.read().strip()
        except FileNotFoundError:
            self.current_password = None

    def load_hidden_folders(self):
        """Gizli klas√∂r bilgilerini y√ºkle"""

        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                self.hidden_folders = json.load(f)
        except FileNotFoundError:
            self.hidden_folders = {}
        except json.JSONDecodeError:
            self.hidden_folders = {}  # Dosya bo≈üsa veya bozuksa sƒ±fƒ±rla

    def save_hidden_folders(self):
        """Gizli klas√∂r bilgilerini kaydet"""

        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(self.hidden_folders, f)

    def generate_unique_id(self, length=16):
        """E≈üsiz bir klas√∂r ID'si olu≈ütur"""

        chars = string.ascii_letters + string.digits
        return ''.join(random.choice(chars) for _ in range(length))

if __name__ == "__main__":
    root = ctk.CTk()
    app = FolderHiderApp(root)
    root.mainloop()